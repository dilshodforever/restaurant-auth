// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: restoran.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestoranrviceClient is the client API for Restoranrvice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestoranrviceClient interface {
	CreateRestoran(ctx context.Context, in *Restoran, opts ...grpc.CallOption) (*Void, error)
	DeleteRestoran(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	UpdateRestoran(ctx context.Context, in *Restoran, opts ...grpc.CallOption) (*Void, error)
	GetByIdRestoran(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Restoran, error)
	GetAllRestoran(ctx context.Context, in *Restoran, opts ...grpc.CallOption) (*GetAllRestorans, error)
}

type restoranrviceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestoranrviceClient(cc grpc.ClientConnInterface) RestoranrviceClient {
	return &restoranrviceClient{cc}
}

func (c *restoranrviceClient) CreateRestoran(ctx context.Context, in *Restoran, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.Restoranrvice/CreateRestoran", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoranrviceClient) DeleteRestoran(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.Restoranrvice/DeleteRestoran", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoranrviceClient) UpdateRestoran(ctx context.Context, in *Restoran, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.Restoranrvice/UpdateRestoran", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoranrviceClient) GetByIdRestoran(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Restoran, error) {
	out := new(Restoran)
	err := c.cc.Invoke(ctx, "/protos.Restoranrvice/GetByIdRestoran", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoranrviceClient) GetAllRestoran(ctx context.Context, in *Restoran, opts ...grpc.CallOption) (*GetAllRestorans, error) {
	out := new(GetAllRestorans)
	err := c.cc.Invoke(ctx, "/protos.Restoranrvice/GetAllRestoran", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestoranrviceServer is the server API for Restoranrvice service.
// All implementations must embed UnimplementedRestoranrviceServer
// for forward compatibility
type RestoranrviceServer interface {
	CreateRestoran(context.Context, *Restoran) (*Void, error)
	DeleteRestoran(context.Context, *ById) (*Void, error)
	UpdateRestoran(context.Context, *Restoran) (*Void, error)
	GetByIdRestoran(context.Context, *ById) (*Restoran, error)
	GetAllRestoran(context.Context, *Restoran) (*GetAllRestorans, error)
	mustEmbedUnimplementedRestoranrviceServer()
}

// UnimplementedRestoranrviceServer must be embedded to have forward compatible implementations.
type UnimplementedRestoranrviceServer struct {
}

func (UnimplementedRestoranrviceServer) CreateRestoran(context.Context, *Restoran) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestoran not implemented")
}
func (UnimplementedRestoranrviceServer) DeleteRestoran(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestoran not implemented")
}
func (UnimplementedRestoranrviceServer) UpdateRestoran(context.Context, *Restoran) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestoran not implemented")
}
func (UnimplementedRestoranrviceServer) GetByIdRestoran(context.Context, *ById) (*Restoran, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdRestoran not implemented")
}
func (UnimplementedRestoranrviceServer) GetAllRestoran(context.Context, *Restoran) (*GetAllRestorans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRestoran not implemented")
}
func (UnimplementedRestoranrviceServer) mustEmbedUnimplementedRestoranrviceServer() {}

// UnsafeRestoranrviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestoranrviceServer will
// result in compilation errors.
type UnsafeRestoranrviceServer interface {
	mustEmbedUnimplementedRestoranrviceServer()
}

func RegisterRestoranrviceServer(s grpc.ServiceRegistrar, srv RestoranrviceServer) {
	s.RegisterService(&Restoranrvice_ServiceDesc, srv)
}

func _Restoranrvice_CreateRestoran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restoran)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoranrviceServer).CreateRestoran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Restoranrvice/CreateRestoran",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoranrviceServer).CreateRestoran(ctx, req.(*Restoran))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restoranrvice_DeleteRestoran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoranrviceServer).DeleteRestoran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Restoranrvice/DeleteRestoran",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoranrviceServer).DeleteRestoran(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restoranrvice_UpdateRestoran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restoran)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoranrviceServer).UpdateRestoran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Restoranrvice/UpdateRestoran",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoranrviceServer).UpdateRestoran(ctx, req.(*Restoran))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restoranrvice_GetByIdRestoran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoranrviceServer).GetByIdRestoran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Restoranrvice/GetByIdRestoran",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoranrviceServer).GetByIdRestoran(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restoranrvice_GetAllRestoran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restoran)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoranrviceServer).GetAllRestoran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Restoranrvice/GetAllRestoran",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoranrviceServer).GetAllRestoran(ctx, req.(*Restoran))
	}
	return interceptor(ctx, in, info, handler)
}

// Restoranrvice_ServiceDesc is the grpc.ServiceDesc for Restoranrvice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Restoranrvice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Restoranrvice",
	HandlerType: (*RestoranrviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestoran",
			Handler:    _Restoranrvice_CreateRestoran_Handler,
		},
		{
			MethodName: "DeleteRestoran",
			Handler:    _Restoranrvice_DeleteRestoran_Handler,
		},
		{
			MethodName: "UpdateRestoran",
			Handler:    _Restoranrvice_UpdateRestoran_Handler,
		},
		{
			MethodName: "GetByIdRestoran",
			Handler:    _Restoranrvice_GetByIdRestoran_Handler,
		},
		{
			MethodName: "GetAllRestoran",
			Handler:    _Restoranrvice_GetAllRestoran_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restoran.proto",
}
